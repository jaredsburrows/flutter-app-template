def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader("UTF-8") { reader ->
    localProperties.load(reader)
  }
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
  throw new GradleException(
    "Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
  flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
  flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.github.ben-manes.versions"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
  compileSdkVersion 33

  defaultConfig {
    applicationId "com.jaredsburrows.example.flutter.flutter_app_template"
    minSdkVersion 30
    targetSdkVersion 33
    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
  }

  compileOptions {
    coreLibraryDesugaringEnabled = true
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
  }

  sourceSets {
    main.java.srcDirs += "src/main/kotlin"
  }

  buildTypes {
    release {
      // Signing with the debug keys for now, so `flutter run --release` works.
      signingConfig signingConfigs.debug
    }
  }

  dependenciesInfo {
    includeInApk = false
    includeInBundle = false
  }
}

flutter {
  source "../.."
}

dependencies {
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

  implementation "org.jetbrains.kotlin:kotlin-bom:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  implementation "com.google.android.material:material:1.6.0"
}
